####Importing everything we need

import matplotlib as plt
import cv2
import numpy as np

####Creating arrays early and opening the image file

lines_list = []
x_coords = np.array([])
y_coords = np.array([])
image = cv2.imread('C:/Users/thegr/Desktop/WORK/year 3/python data/star.jpg')
cv2.imshow("image",image)
cv2.waitKey(0)
cv2.destroyAllWindows()

####Processing the image to make it grayscale and only caring about the boundaries of the shapes

gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)
threshold, im_bw = cv2.threshold(gray, 150, 255, cv2.THRESH_TOZERO)
edges = cv2.Canny(im_bw,50,150, apertureSize = 3)
cv2.imshow("gray",gray)
cv2.waitKey(0)
cv2.destroyAllWindows()
cv2.imshow("edges",edges)
cv2.waitKey(0)
cv2.destroyAllWindows()

####Finding any lines within the image and storing the start and end coordinates of each

lines = cv2.HoughLinesP(edges, 1, np.pi/180, threshold = 100, minLineLength = 150, maxLineGap = 5)

for points in lines:
    x1,y1,x2,y2 = points[0]
    new_image = cv2.line(im_bw,(x1,y1),(x2,y2),(0,0,0),2)
    lines_list.append([(x1,y1),(x2,y2)])
cv2.imshow("new image",new_image)
cv2.waitKey(0)
cv2.destroyAllWindows()

####Finding the coordinates of all of the stars in the image and adding them to a list

for rows in range(new_image.shape[0]):
    for columns in range(new_image.shape[1]):
        if new_image[rows][columns] != 0:
            x_coords = np.concatenate((x_coords, np.array([columns])))
            y_coords = np.concatenate((y_coords, np.array([rows])))
x_coords = x_coords.reshape(-1, 1)
y_coords = y_coords.reshape(-1, 1)
coords = np.hstack((y_coords, x_coords))

####Grouping any coordinates or lines that are likely to be the same object

####Comparing the star map to the image in question and finding the transformation

####Getting the corrected equation for the line

####Converting to orbital characteristics using time

####Pulling any other characteristics from the image

####Naming the object and pushing it to the external database

####The final output of the program

print(lines_list)
print(coords)
cv2.waitKey(0)
cv2.destroyAllWindows()






